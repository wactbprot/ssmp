#!/usr/bin/env node

var _          = require("underscore")
  , ndata      = require("ndata")
  , repl       = require("repl")
  , prettyjson = require("prettyjson")
  , clone      = require("clone")
  , deflt      = require("../lib/default")


ndata.createServer({port: deflt.mem.port}).on('ready', function(){
  var context  = repl.start("ssmp > ").context;
  context.mem = ndata.createClient({port: deflt.mem.port}).on('ready', function(){
                  var utils      = require("../lib/utils")
                    , load       = require("../lib/load")
                    , run        = require("../lib/run")
                    , net        = require("../lib/net")
                  , request    = require("../lib/request")
                  , worker     = require("../lib/worker");

                context.cb = function(res){
                  console.log(prettyjson.render(res));
                }

                context.ecb = function(err, res){
                  if(err){
                    console.log(prettyjson.render(err));
                  }else{
                    console.log(prettyjson.render(res));
                  }
                }

                var task_exec = function(task, repl, cb){
                  var tsk   = clone(task)
                    , tdef;
                  tsk.Path = [];

                  if(!_.isObject(repl)){
                    repl = {};
                  }

                  if(!_.isObject(tsk.Defaults) ){
                    tdef = {};
                  }else{
                    tdef = tsk.Defaults
                    delete tsk.Defaults;
                  }

                  tdef  = _.extend(tdef, repl);

                  var k  = _.keys(tdef)
                    , v  = _.values(tdef)
                    , Nk = k.length;

                  for(var i = 0; i < Nk; i++){
                    tsk = utils.replace_in_with(tsk, k[i], v[i])
                    if(i == Nk - 1){
                      tsk.Defaults = tdef;
                      if(_.isObject(tsk) && tsk.Action && _.isFunction(cb)){
                        worker[tsk.Action](tsk, cb);
                      }
                    }
                  }
                }

                var refresh_task_list = function(){
                  context.task = {};
                  var con = net.list({ListName:"kv", ViewName:"tasks"});
                  request.exec(con, false, false, function(err, res){
                    if(err){
                      console.log(err);
                    }else{
                      for(var taskName in res){
                        context.task[taskName.replace(/\-/g, "_")] = res[taskName];
                      } // task
                    }
                  })
                }


                context.defaults  = deflt;
                context.utils     = utils;
                context.load      = load;
                context.worker    = worker;
                context.run       = run;
                context.request   = request;
                context.task_exec = task_exec;
                context.refresh_task_list = refresh_task_list;

                refresh_task_list();

                console.log(".........................................................\n");
                console.log("whats already done:");
                console.log("- refresh task list and assign to task");
                console.log("- default call back in variable: cb defined");
                console.log("- default call back with err param in variable: ecb");
                console.log("- function task_exec(task, replace_object, cb)");
                console.log("- function refresh_task_list()");
                console.log("- ndata client available in variable: mem");
                console.log("- static json below ssmp/static in variable: statics");
                console.log(".........................................................\n");
              });
});